#:include "common.fypp"
#:set RIL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES

submodule (forlab_io) forlab_io_disp

    implicit none
    character(len=*), parameter :: fmt_r = '(*(g12.4, 1x))'
    character(len=*), parameter :: fmt_c = '(*(g25.0, 1x))'
    
contains
    
    #:for kind, type in RIL_KINDS_TYPES
    module procedure disp_0_${type[0]}$${kind}$
        !! Disp ${type}$ variable to default output_unit
        if(present(string)) print *, trim(string)
        print fmt_r, value
    end procedure disp_0_${type[0]}$${kind}$

    module procedure disp_1_${type[0]}$${kind}$
        !! Disp ${type}$ vector variable to default output_unit
        if(present(string)) print *, trim(string)
        print fmt_r, value(:)
    end procedure disp_1_${type[0]}$${kind}$

    module procedure disp_2_${type[0]}$${kind}$
        !! Disp ${type}$ 2D array variable to default output_unit
        integer :: i, m
        m = size(value, 1)
        if(present(string)) print *, trim(string)
        do i = 1, m
            print fmt_r, value(i,:)
        end do
    end procedure disp_2_${type[0]}$${kind}$

    module procedure disp_3_${type[0]}$${kind}$
        !! Disp ${type}$ 3D array variable to default output_unit
        integer :: i, dim1, dim2, dim3
        dim1 = size(value, 1)
        dim2 = size(value, 2)
        dim3 = size(value, 3)
        if(present(string)) print *, trim(string)
        if(dim == 1) then
            do i = 1, dim1
                print *, 'Slice ('//to_string(i)//',:,:):'
                call disp_2_${type[0]}$${kind}$(value(i, :, :))
            end do
        elseif(dim == 2) then
            do i = 1, dim2
                print *, 'Slice (:,'//to_string(i)//',:):'
                call disp_2_${type[0]}$${kind}$(value(:, i, :))
            end do
        elseif (dim == 3) then
            do i = 1, dim3
                print *, 'Slice (:,:,'//to_string(i)//'):'
                call disp_2_${type[0]}$${kind}$(value(:, :, i))
            end do
        else
            call error_stop('Error(disp): wrong dimension')
        end if
    end procedure disp_3_${type[0]}$${kind}$
    #:endfor

    #:for kind, type in CMPLX_KINDS_TYPES
    module procedure disp_0_${type[0]}$${kind}$
        !! Disp ${type}$ variable to default output_unit
        if(present(string)) print *, trim(string)
        print fmt_c, format_string(value, '(g0.4)')
    end procedure disp_0_${type[0]}$${kind}$

    module procedure disp_1_${type[0]}$${kind}$
        !! Disp ${type}$ vector variable to default output_unit
        integer :: i, m
        m = size(value)
        if(present(string)) print *, trim(string)
        print fmt_c, (format_string(value(i), '(g0.4)'), i=1, m)
    end procedure disp_1_${type[0]}$${kind}$

    module procedure disp_2_${type[0]}$${kind}$
        !! Disp ${type}$ 2D array variable to default output_unit
        integer :: i, j, m, n
        m = size(value, 1)
        n = size(value, 2)
        if(present(string)) print *, trim(string)
        do i = 1, m
            print fmt_c, (format_string(value(i, j), '(g0.4)'), j=1, n)
        end do
    end procedure disp_2_${type[0]}$${kind}$

    module procedure disp_3_${type[0]}$${kind}$
        !! Disp ${type}$ 3D array variable to default output_unit
        integer :: i, dim1, dim2, dim3
        dim1 = size(value, 1)
        dim2 = size(value, 2)
        dim3 = size(value, 3)
        if(present(string)) print *, trim(string)
        if(dim == 1) then
            do i = 1, dim1
                print *, 'Slice ('//to_string(i)//',:,:):'
                call disp_2_${type[0]}$${kind}$(value(i, :, :))
            end do
        elseif(dim == 2) then
            do i = 1, dim2
                print *, 'Slice (:,'//to_string(i)//',:):'
                call disp_2_${type[0]}$${kind}$(value(:, i, :))
            end do
        elseif (dim == 3) then
            do i = 1, dim3
                print *, 'Slice (:,:,'//to_string(i)//'):'
                call disp_2_${type[0]}$${kind}$(value(:, :, i))
            end do
        else
            call error_stop('Error(disp): wrong dimension')
        end if
    end procedure disp_3_${type[0]}$${kind}$
    #:endfor

    module procedure disp_str
        !! Disp character variable to default output_unit
        if(present(string)) print *, trim(string)
        if(present(value)) then
            print *, trim(value)
        else
            print *, ''
        end if
    end procedure disp_str

end submodule forlab_io_disp