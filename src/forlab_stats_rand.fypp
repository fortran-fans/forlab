!!\TODO: Reduced speed. @2021-6-15

#:include 'common.fypp'
submodule(forlab_stats) forlab_stats_randu

    implicit none

contains

    #! intrinsic 'random_number' is not PURE
    #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
    #:for k1, t1 in RI_KINDS_TYPES
    module procedure randu_${t1[0]}$${k1}$
        ${t1}$ :: from_, to_
        #:if t1[0] == 'r'
        from_ = optval(from, 0.0_${k1}$)
        to_ = optval(to, 1.0_${k1}$)
        call random_number(X)
        X = min(from_, to_) + X*(max(from_, to_) - min(from_, to_))
        #:elif t1[0] == 'i'
        real :: r
        from_ = optval(from, 0_${k1}$)  
        to_ = optval(to, 1_${k1}$)
        call random_number(r)
        X = min(from_, to_) + nint(r*real(max(from_, to_) - min(from_, to_)))
        #:endif
        return
    end procedure

    #:if t1[0] == 'r'
    module procedure randn_${k1}$
        real(${k1}$) :: u, v, s
        real(${k1}$) :: mean_, std_ 

        mean_ = optval(mean, 0.0_${k1}$)
        std_ = optval(std, 1.0_${k1}$)
        do
            call randu(u)
            u = 2._${k1}$*u - 1._${k1}$
            call randu(v)
            v = 2._${k1}$*v - 1._${k1}$
            s = u*u + v*v
            if ((s > 0._${k1}$) .and. (s < 1._${k1}$)) exit
        end do
        X = mean_ + u*sqrt(-2.0_${k1}$*log(s)/s)*std_
        return
    end procedure
    #:endif
    #:endfor

end submodule forlab_stats_randu
