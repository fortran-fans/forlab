#:include 'common.fypp'
submodule(forlab) forlab_save
    !! Version: experimental
    !!
    !!## Savetxt
    !! savetxt saves 1 and 2-dimensional arrays to txt files.
    !!
    !!### Syntax
    !!    call savetxt(filename, x)
    !!    call savetxt(filename, A)
    !!
    !!### Description
    !! `call savetxt(filename, x)` saves a vector array `x` into the txt file
    !! filename.
    !!
    !! `call savetxt(filename, A)` saves a 2-dimensional array `A` into the txt
    !! file filename.
    !!
    !!## Savebin
    !! savebin saves arrays to binary files.
    !!
    !!### Syntax
    !!    call savebin(filename, x)
    !!    call savebin(filename, A)
    !!    call savebin(filename, X)
    !!
    !!### Description
    !! `call savebin(filename, x)` saves a vector `x` into the binary file
    !! filename.
    !!
    !! `call savebin(filename, A)` saves a 2-dimensional array into the binary
    !! file filename.
    !!
    !! `call savebin(filename, X)` saves a 3-dimensional array into the binary
    !! file filename.
    use forlab_kinds
    implicit none

contains
    #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
    #:set RANKS = range(1,4)
    #:for RANK in RANKS
    #:for k1,t1 in RCI_KINDS_TYPES
    #:if RANK < 3
    module procedure savetxt_${RANK}$_${t1[0]}$${k1}$
        integer :: i, m
        type(file) :: outfile
        character(8), parameter :: type = '${t1[0]}$${k1}$'

        outfile = file(trim(filename))
        m = size(x, 1)

        call outfile%open('w t')
        write(outfile%unit, '(A6,A8,I8)') 'TYPE: ', type, int(${RANK}$, 4)
        write(outfile%unit, '(A6,A)') 'DATA: ', time_string()

        #:if RANK == 1
        write(outfile%unit, '(A11,${RANK}$(I8))') 'DIMENSION: ', size(X,1)
        #:elif RANK == 2
        write(outfile%unit, '(A11,${RANK}$(I8))') 'DIMENSION: ', size(X,1), size(X,2)
        #:endif
        write(outfile%unit, '(A)') '---'

        do i = 1, m
            #:if RANK == 1
            write (outfile%unit, *) X(i)
            #:elif RANK == 2
            write (outfile%unit, *) X(i, :)
            #:endif
        end do
        call outfile%close()
        return
    end procedure
    #:endif

    module procedure savebin_${RANK}$_${t1[0]}$${k1}$
        type(File) :: outfile
        character(8), parameter :: type = '${t1[0]}$${k1}$'

        outfile = file(trim(filename))
        call outfile%open('w b')
        write(outfile%unit) type, int(${RANK}$, 4)
        #:if RANK == 1
        write(outfile%unit) size(X,1)
        #:elif RANK == 2
        write(outfile%unit) size(X,1), size(X,2)
        #:elif RANK == 3
        write(outfile%unit) size(X,1), size(X,2), size(X,3)
        #:endif

        #:if t1[0] == 'c'
        write (outfile%unit) real(X), imag(X)
            !! Precision
            #! Store complex array values.
        #:else
        write (outfile%unit) X
            #! Store real array values.
        #:endif
        
        call outfile%close()
        return
    end procedure

    #:endfor
    #:endfor

    character(19) function time_string()
        implicit none
        character(10) :: data, time
        call date_and_time(data, time)
        time_string = data(1:4)//'-'//data(5:6)//'-'//data(7:8)//' '//time(1:2) &
        //':'//time(3:4)//':'//time(5:6)
            #! 显示 日期时间时区
    end function
end submodule
