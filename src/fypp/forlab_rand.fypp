#:include 'common.fypp'
submodule(forlab) forlab_randu
    !! Version: experimental
    !!
    !! randu generates uniformly distributed random numbers.
    !!
    !!## Syntax
    !!    x = randu()
    !!    x = randu(dim1)
    !!    A = randu(dim1, dim2)
    !!    X = randu(dim1, dim2, dim3)
    !!
    !!## Description
    !! `x = randu()` returns a single uniformly distributed random number in
    !! the interval [0,1].
    !!
    !! `x = randu(dim1)` returns a dim1 vector of uniformly distributed random
    !! numbers.
    !!
    !! `A = randu(dim1, dim2)` returns a dim1-by-dim2 matrix of uniformly
    !! distributed random numbers.
    !!
    !! `X = randu(dim1, dim2, dim3)` returns a dim1-by-dim2-by-dim3
    !! 3-dimensional matrix of uniformly distributed random numbers.
    !!
    !!## Examples
    !!    x = randu()
    !!        0.383413825
    !!
    !!    x = randu(5)*2 - 1
    !!        0.640258908  -0.873707294   0.787327528
    use forlab_kinds
    use forlab_optval, only: optval
    implicit none
contains
    #:for k1, t1 in REAL_KINDS_TYPES
    module procedure randu_${k1}$
        ${k1}$ :: from_, to_

        from_ = optval(x=from, 0.0_${k1}$)
        to_ = optval(x=to, 1.0_${k1}$)
        call random_number(X)
        X = min(from_, to_) + X*(max(from_, to_) - min(from_, to_))
        return
    end procedure

    module procedure randn_${k1}$
        real(${k1}$) :: u, v, s
        real(${k1}$) :: mean_, std_ 

        mean_ = optval(x=mean, 0.0_${k1}$)
        std_ = optval(x=std, 1.0_${k1}$)
        do
            call randu(u)
            u = 2._${k1}$*u - 1._${k1}$
            call radnu(v)
            v = 2._${k1}$*v - 1._${k1}$
            s = u*u + v*v
            if ((s > 0._${k1}$) .and. (s < 1._${k1}$)) exit
        end do
        X = mean_ + u*sqrt(-2.0_${k1}$*log(s)/s)*std_
        return
    end procedure

    #:endfor

end submodule
