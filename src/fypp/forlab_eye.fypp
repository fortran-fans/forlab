#:include 'common.fypp'
submodule(forlab) forlab_eye
    !! Version: experimental
    !!
    !! eye creates the identity matrix.
    !!
    !!## Syntax
    !!    I = eye(dim1)
    !!    I = eye(dim1, dim2)
    !!
    !!## Description
    !! `I = eye(dim1)` returns an dim1-by-dim1 matrix with ones on the main
    !! diagonal and zeros elsewhere.  
    !! `I = eye(dim1, dim2)` returns a dim1-by-dim2 matrix with ones on the
    !! main diagonal and zeros elsewhere.
    !!
    !!## Examples
    !!      I = eye(3)  
    !!          1.  0.  0.  
    !!          0.  1.  0.  
    !!          0.  0.  1.
    !!
    !!      I = eye(3, 4)  
    !!          1.  0.  0.  0.  
    !!          0.  1.  0.  0.  
    !!          0.  0.  1.  0.
    !!
    !!      I = eye(4, 3)  
    !!          1.  0.  0.
    !!          0.  1.  0.
    !!          0.  0.  1.
    !!          0.  0.  0. 
    use forlab_kinds
    implicit none
contains
    #:set RANKS = range(1, 3)
    #:for k1 in REAL_KINDS
    #:for RANK in RANKS
    module procedure eye_${RANK}$_${k1}$
        integer :: i
        #:if RANK == 1
        eye_${RANK}$_${k1}$ = ${k1[0]}$zeros(dim1, dim1)
        do i = 1, dim1
        #:elif RANK == 2
        eye_${RANK}$_${k1}$ = ${k1[0]}$zeros(dim1, dim2)
        do i = 1, min(dim1, dim2)
        #:endif
            eye_${RANK}$_${k1}$ (i, i) = 1.0_${k1}$
        end do
        return
    end procedure

    #:endfor
    #:endfor
end submodule
