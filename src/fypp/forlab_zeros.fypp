#:include 'common.fypp'

#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix

#:set RANKS = range(1, 4)
submodule(forlab) forlab_zeros
    !! Version: experimental
    !!
    !! Discussion:
    !! ----
    !! https://fortran-lang.discourse.group/t/fortran-function-return-value-polymorphism/1350/5
    use forlab_kinds
    implicit none
contains
    #:for k1, t1 in REAL_KINDS_TYPES
    #:for RANK in RANKS
    module procedure zeros_${RANK}$_${k1}$
        integer :: ierr
        #:if RANK == 1
        allocate (zeros_${RANK}$_${k1}$ (dim1), stat=ierr)
        #:elif RANK == 2
        allocate (zeros_${RANK}$_${k1}$ (dim1, dim2), stat=ierr)
        #:elif RANK == 3
        allocate (zeros_${RANK}$_${k1}$ (dim1, dim2, dim3), stat=ierr)
        #:endif
        if (ierr .ne. 0) then
            print *, "Error: in zeros, could not allocate array."
            stop
        else
            zeros_${RANK}$_${k1}$ = 0.0_${k1}$
        end if
        return
    end procedure

    #:endfor
    #:endfor
end submodule
