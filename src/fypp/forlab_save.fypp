#:include 'common.fypp'
submodule(forlab) forlab_save
    !! Version: experimental
    !!
    ! savetxt saves 1 and 2-dimensional arrays to txt files.
    !
    ! Syntax
    !-----------------------------------------------------------------------
    ! call savetxt(filename, x)
    ! call savetxt(filename, A)
    !
    ! Description
    !-----------------------------------------------------------------------
    ! call savetxt(filename, x) saves a vector array x into the txt file
    ! filename.
    !
    ! call savetxt(filename, A) saves a 2-dimensional array A into the txt
    ! file filename.
    !
    ! savebin saves arrays to binary files.
    !
    ! Syntax
    !-----------------------------------------------------------------------
    ! call savebin(filename, x)
    ! call savebin(filename, A)
    ! call savebin(filename, X)
    !
    ! Description
    !-----------------------------------------------------------------------
    ! call savebin(filename, x) saves a vector x into the binary file
    ! filename.
    !
    ! call savebin(filename, A) saves a 2-dimensional array into the binary
    ! file filename.
    !
    ! call savebin(filename, X) saves a 3-dimensional array into the binary
    ! file filename.
    use forlab_kinds
    implicit none

contains
    !! REAL Versions
    #:for k1,t1 in REAL_KINDS_TYPES
    module procedure savetxt_1_${k1}$
        integer :: i, m
        type(file) :: infile
        integer :: unit

        infile = file(unit, trim(filename))
        m = size(x)
        call infile%open()
        do i = 1, m
            write (infile%unit, *) x(i)
        end do
        call infile%close()
        return
    end procedure

    module procedure savetxt_2_${k1}$
        integer :: i, m
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        m = size(A, 1)
        call infile%open()
        do i = 1, m
            write (infile%unit, *) A(i, :)
        end do
        call infile%close()
        return
    end procedure

    module procedure savebin_1_${k1}$
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        call infile%open(kind(x)*size(x))
        write (infile%unit, rec=1) x
        call infile%close()
        return
    end procedure

    module procedure savebin_2_${k1}$
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        call infile%open(kind(A)*size(A))
        write (infile%unit, rec=1) A
        call infile%close()
        return
    end procedure

    module procedure savebin_3_${k1}$
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        call infile%open(kind(X)*size(X))
        write (infile%unit, rec=1) X
        call infile%close()
        return
    end procedure

    #:endfor

    !! Integer Versions
    #:for k1, t1 in INT_KINDS_TYPES
    module procedure savetxt_1_${k1}$
        integer :: i, m
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        m = size(x)
        call infile%open()
        do i = 1, m
            write (infile%unit, *) x(i)
        end do
        call infile%close()
        return
    end procedure

    module procedure savetxt_2_${k1}$
        integer :: i, m
        type(File) :: infile
        integer :: unit

        infile = File(unit, trim(filename))
        m = size(A, 1)
        call infile%open()
        do i = 1, m
            write (infile%unit, *) A(i, :)
        end do
        call infile%close()
        return
    end procedure

    #:endfor
end submodule
