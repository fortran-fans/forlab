#:include 'common.fypp'
submodule(forlab) forlab_linspace
    !! Version: experimental
    !!
    !! linspace creates a linearly spaced vector.   
    !!
    !!## Syntax
    !!    x = linspace(x1, x2, n)
    !!
    !!## Description
    !! `x = linspace(x1, x2, n)` returns a vector of n evenly spaced points
    !! between x1 and x2.
    !!
    !!## Examples
    !!    x = linspace(0, 10, 11)
    !!        0.  1.  2.  3.  4.  5.  6.  7.  8.  9.  10.
    use forlab_kinds
    implicit none

contains

    #:for k1, t1 in REAL_KINDS_TYPES
    module procedure linspace_rr_${k1}$
        integer :: i
        real(${k1}$) :: step
        if (n<=1) print *, ('Error: in linspace, n should be > 1.')
        allocate (linspace_rr_${k1}$(n))
        step = (last - first)/(n - 1)
        linspace_rr_${k1}$ = first + step*real([(i - 1, i=1, n)], ${k1}$)
        return
    end procedure

    module procedure linspace_ii_${k1}$
        if (n<=1) print *, ('Error: in linspace, n should be > 1.')
        linspace_ii_${k1}$ = ${k1[0]}$linspace(real(first, kind=${k1}$), real(last, kind=${k1}$), n)
    end procedure 

    module procedure linspace_ri_${k1}$
        if (n<=1) print *, ('Error: in linspace, n should be > 1.')
        linspace_ri_${k1}$ = ${k1[0]}$linspace(first, real(last, kind=${k1}$), n)
        return
    end procedure

    module procedure linspace_ir_${k1}$
        if (n>1) print *, ('Error: in linspace, n should be > 1.')
        linspace_ir_${k1}$ = ${k1[0]}$linspace(real(first, kind=${k1}$), last, n)
        return
    end procedure

    #:endfor

end submodule
