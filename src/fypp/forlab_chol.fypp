
#:include "common.fypp"

submodule(forlab) forlab_chol
    !! Version: expermental
    !!
    !! chol computes Cholesky's decomposition of a symmetric positive
    !! definite matrix.
    !!
    !!### Syntax
    !!
    !!      L = chol(A)
    !!
    !!### Description
    !!
    !!  `L = chol(A)` returns a lower triangular matrix L satisfying the
    !! equation A = L*Lt.
    use forlab_kinds
    implicit none
    
contains
    #:for k1,t1 in REAL_KINDS_TYPES
    module procedure chol_${k1}$
        integer :: i, j, k, n
        ${t1}$ :: sum1, sum2
        ${t1}$, dimension(:), allocatable :: d
        ${t1}$, dimension(:,:), allocatable :: V
        ${t1}$, parameter::zero=0.0_${k1}$,one=1.0_${k1}$
        call eig(A, V, d)
        deallocate(V)
        if (all(d >= zero)) then
            n = size(A, 1)
            allocate(L(n, n))
            call zeros(L)
            L(1, 1) = sqrt(A(1, 1))
            do i = 2, n
                L(i, 1) = A(i, 1)/L(1, 1)
            end do
            do i = 2, n
                do k = 1, i
                    sum1 = zero
                    sum2 = zero
                    do j = 1, k - 1
                        if (i == k) then
                            sum1 = sum1 + (L(k, j)*L(k, j))
                            L(k, k) = sqrt(A(k, k) - sum1)
                        elseif (i .gt. k) then
                            sum2 = sum2 + (L(i, j)*L(k, j))
                            L(i, k) = (one/L(k, k))*(A(i, k) - sum2)
                        else
                            L(i, k) = zero
                        end if
                    end do
                end do
            end do
        else
            error stop "Error: in chol(A), A should be positive definite."
        end if
        deallocate(d)
    end procedure chol_${k1}$

    #:endfor

    #:for k1,t1 in CMPLX_KINDS_TYPES
    #:endfor
end submodule

