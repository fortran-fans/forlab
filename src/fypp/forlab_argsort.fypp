
#:include 'common.fypp'
submodule(forlab) forlab_argsort
    !! Version: expermental
    !!# argsort
    !! argsort generates the indices that would sort an array.
    !!
    !!## Syntax
    !!      y = argsort(x)
    !!      y = argsort(x, 1)
    !!      y = argsort(x, 2)
    !!
    !!## Description
    !!
    !! `y = argsort(x)` returns the indices that would sort an array in
    !! ascending order.
    !!
    !! `y = argsort(x, 1)` (see `y = argsort(x)`).
    !!
    !! `y = argsort(x, 2)` returns the indices that would sort an array in
    !! descending order.
    !!
    !!## Notes
    !!
    !! `x(argsort(x), order)` returns the same result as `sort(x, order)`.
    use forlab_kinds
    implicit none
contains

    #:for k1, t1 in INT_KINDS_TYPES+REAL_KINDS_TYPES
    module procedure argsort_${k1}$
        integer::i,n
        ${t1}$,allocatable::xsort(:)
        integer::order1
        n = size(x)
        xsort = x
        argsort_${k1}$ = [(i, i=1, n)]
        if (.not. present(order))then
            order1=1
        else
            order1=order
        end if
        call quickargsort_${k1}$(xsort, argsort_${k1}$, n, order1)
    end procedure argsort_${k1}$
    recursive subroutine quickargsort_${k1}$(x, idx, n, order)
        ${t1}$, dimension(n), intent(inout) :: x
        integer, dimension(n), intent(inout) :: idx
        integer, intent(in) :: n, order
        integer:: left, right, marker
        ${t1}$ :: pivot,tmp1
        integer::tmp2
        if (n > 1) then
            left = 0
            right = n + 1
            pivot = x(randi(n))
            select case (order)
            case (1)
                do while (left < right)
                    left = left + 1
                    right = right - 1
                    do while (x(left) < pivot)
                        left = left + 1
                    end do
                    do while (x(right) > pivot)
                        right = right - 1
                    end do
                    if (left < right) then
                        tmp1 = x(left)
                        x(left) = x(right)
                        x(right) = tmp1
                        tmp2 = idx(left)
                        idx(left) = idx(right)
                        idx(right) = tmp2
                    end if
                end do
            case (2)
                do while (left < right)
                    left = left + 1
                    right = right - 1
                    do while (x(left) > pivot)
                        left = left + 1
                    end do
                    do while (x(right) < pivot)
                        right = right - 1
                    end do
                    if (left < right) then
                        tmp1 = x(left)
                        x(left) = x(right)
                        x(right) = tmp1
                        tmp2 = idx(left)
                        idx(left) = idx(right)
                        idx(right) = tmp2
                    end if
                end do
            case default
                error stop "Error:Sort order MUST be 1 or 2"
            end select
            if (left == right) then
                marker = left + 1
            else
                marker = left
            end if
            call quickargsort_${k1}$(x(:marker - 1), idx(:marker - 1), marker - 1, order)
            call quickargsort_${k1}$(x(marker:), idx(marker:), n - marker + 1, order)
        end if
    end subroutine quickargsort_${k1}$

    #:endfor
end submodule
