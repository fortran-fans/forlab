#:include "common.fypp"
submodule(forlab) forlab_disp
    use forlab_kinds
    #:for k1,t1 in REAL_KINDS_TYPES
        ${t1}$, parameter :: nearzero_${k1}$ = 1.0e-10_${k1}$
    #:endfor
    character(len=*), parameter :: fmt_r = "( *( g11.4, 1x ) )"
    character(len=*), parameter :: fmt_c = "( *( g11.4, a1, g11.4, a1, 1x ) )"
    interface filter
        #:for k1,t1 in REAL_KINDS_TYPES
            module procedure filter_${k1}$
        #:endfor
    end interface
contains

    #:for k1,t1 in REAL_KINDS_TYPES
        module procedure disp_r${k1}$0
            if (present(string)) print *, trim(string)
            print fmt_r, filter(x)
            return
        end procedure

        module procedure disp_r${k1}$1
            integer :: i, m

            m = size(x)
            if (present(string)) print *, trim(string)
            print fmt_r, (filter(x(i)), i=1, m)

            return
        end procedure

        module procedure disp_r${k1}$2
            integer :: i, j, m, n

            m = size(A, 1)
            n = size(A, 2)
            if (present(string)) print *, trim(string)
            do i = 1, m
                print fmt_r, (filter(A(i, j)), j=1, n)
            end do
            return
        end procedure

        module procedure disp_r${k1}$3
            integer :: i, dim1, dim2, dim3

            dim1 = size(X, 1)
            dim2 = size(X, 2)
            dim3 = size(X, 3)
            if (present(string)) print *, trim(string)
            if ((.not. present(dim)) .or. (dim .eq. 1)) then
                do i = 1, dim1
                    print *, "Slice ("//num2str(i)//",:,:):"
                    call disp(X(i, :, :))
                end do
            elseif (dim .eq. 2) then
                do i = 1, dim2
                    print *, "Slice (:,"//num2str(i)//",:):"
                    call disp(X(:, i, :))
                end do
            elseif (dim .eq. 3) then
                do i = 1, dim3
                    print *, "Slice (:,:,"//num2str(i)//"):"
                    call disp(X(:, :, i))
                end do
            end if
            return
        end procedure
    #:endfor
    #:for k1, t1 in CMPLX_KINDS_TYPES
        module procedure disp_c${k1}$0

            if (present(string)) print *, trim(string)
            if (imag(x) .ge. 0.0d0) then
                ! print *, num2str(real(x))//" + "//num2str(abs(imag(x)))//"i"
                print fmt_c, filter(real(x)), "+", filter(abs(imag(x))), "i"
            else
                ! print *, num2str(real(x))//" - "//num2str(abs(imag(x)))//"i"
                print fmt_c, filter(real(x)), "-", filter(abs(imag(x))), "i"
            end if
            return
        end procedure

        module procedure disp_c${k1}$1
            integer :: i, m

            m = size(x)
            if (present(string)) print *, trim(string)
            do i = 1, m
                call disp_c${k1}$0(x(i))
            end do
            return
        end procedure

        module procedure disp_c${k1}$2
            integer :: i, j, m, n
            m = size(A, 1)
            n = size(A, 2)
            if (present(string)) print *, trim(string)
            do i = 1, m
                do j = 1, n
                    call disp_c${k1}$0(A(i, j))
                end do
                print *, ''
            end do
            return
        end procedure
    #:endfor

    module procedure disp_l0
        if (present(string)) print *, trim(string)
        print fmt_r, x
        return
    end procedure

    module procedure disp_l1
        integer :: i, m
        m = size(x)
        if (present(string)) print *, trim(string)
        print fmt_r, (x(i), i=1, m)
        return
    end procedure disp_l1

    module procedure disp_l2
        integer :: i, j, m, n
        m = size(A, 1)
        n = size(A, 2)
        if (present(string)) print *, trim(string)
        do i = 1, m
            print fmt_r, (A(i, j), j=1, n)
        end do
        return
    end procedure disp_l2

    #:for k1, t1 in INT_KINDS_TYPES
        module procedure disp_i${k1}$0
            if (present(string)) print *, trim(string)
            print fmt_r, x
            return
        end procedure

        module procedure disp_i${k1}$1
            integer :: i, m
            m = size(x)
            if (present(string)) print *, trim(string)
            print fmt_r, (x(i), i=1, m)
            return
        end procedure

        module procedure disp_i${k1}$2
            integer :: i, j, m, n
            m = size(A, 1)
            n = size(A, 2)
            if (present(string)) print *, trim(string)
            do i = 1, m
                print *, (A(i, j), j=1, n)
            end do
            return
        end procedure

        module procedure disp_i${k1}$3
            integer :: i, dim1, dim2, dim3
            dim1 = size(X, 1)
            dim2 = size(X, 2)
            dim3 = size(X, 3)
            if (present(string)) print *, trim(string)
            if ((.not. present(dim)) .or. (dim .eq. 1)) then
                do i = 1, dim1
                    print *, "Slice ("//num2str(i)//",:,:):"
                    call disp(X(i, :, :))
                end do
            elseif (dim .eq. 2) then
                do i = 1, dim2
                    print *, "Slice (:,"//num2str(i)//",:):"
                    call disp(X(:, i, :))
                end do
            elseif (dim .eq. 3) then
                do i = 1, dim3
                    print *, "Slice (:,:,"//num2str(i)//"):"
                    call disp(X(:, :, i))
                end do
            end if
            return
        end procedure
    #:endfor

    #:for k1,t1 in REAL_KINDS_TYPES
        module function filter_${k1}$(x)
            !! Filter near-zero. Note: elemental
            ${t1}$, intent(in) :: x
            ${t1}$ :: filter_${k1}$
            filter_${k1}$ = x
            if (abs(x) < nearzero_${k1}$) filter_${k1}$ = 0.0
        end function

    #:endfor

    module procedure disp_str
        if (present(string)) then
            print *, trim(string)
        else
            print *, ''
        end if
        return
    end procedure
end submodule
