#:include 'common.fypp'

#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix

#:set RANKS = range(0, 4)
submodule(forlab) forlab_randn
    !! Version: experimental
    !!
    !! Discussion:
    !! ----
    !! https://fortran-lang.discourse.group/t/fortran-function-return-value-polymorphism/1350/5
    use forlab_kinds
    implicit none
contains
    !! Default versions
    #:for k1, t1 in REAL_KINDS_TYPES
    #:for RANK in RANKS
    module procedure randn_${RANK}$_${k1}$
    #:if RANK == 0
        real(${k1}$) :: u, v, s
    #:elif RANK == 1
        integer :: i
    #:elif RANK == 2
        integer :: i, j
    #:elif RANK == 3
        integer :: i, j, k
    #:endif
        #:if RANK == 0
        do
            u = 2._${k1}$*randu() - 1._${k1}$
            v = 2._${k1}$*randu() - 1._${k1}$
            s = u*u + v*v
            if ((s > 0._${k1}$) .and. (s < 1._${k1}$)) exit
        end do
        randn_${RANK}$_${k1}$ = u*sqrt(-2.0_${k1}$*log(s)/s)
        #:elif RANK == 1
        allocate (randn_${RANK}$_${k1}$ (dim1))
        do i = 1, dim1
            randn_${RANK}$_${k1}$ (i) = randn_0_${k1}$()
        end do
        #:elif RANK == 2
        allocate (randn_${RANK}$_${k1}$ (dim1, dim2))
        do i = 1, dim1
            do j = 1, dim2
                randn_${RANK}$_${k1}$ (i, j) = randn_0_${k1}$()
            end do
        end do
        #:elif RANK == 3
        allocate (randn_${RANK}$_${k1}$ (dim1, dim2, dim3))
        do i = 1, dim1
            do j = 1, dim2
                do k = 1, dim3
                    randn_${RANK}$_${k1}$ (i, j, k) = randn_0_${k1}$()
                end do
            end do
        end do
        #:endif

        return
    end procedure

    #:endfor
    #:endfor
end submodule
