#:include 'common.fypp'

#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix

#:set RANKS = range(0, 4)
submodule(forlab) forlab_randn
    !! Version: experimental
    !!
    !! randn generates normally distributed random numbers using polar
    !! Box-Muller algorithm.
    !!
    !!## Syntax
    !!    x = randn()
    !!    x = randn(dim1)
    !!
    !!## Description
    !! `x = randn()` returns a single normally distributed random number with
    !! mean 0 and standard deviation 1.
    !!
    !! `x = randn(dim1)` returns a dim1 vector of normally distributed random
    !! numbers.
    !!
    !! `A = randn(dim1, dim2)` returns a dim1-by-dim2 matrix of normally
    !! distributed random numbers.
    !!
    !! `X = randn(dim1, dim2, dim3)` returns a dim1-by-dim2-by-dim3
    !! 3-dimensional matrix of normally distributed random numbers.
    !!
    !!## Examples
    !!    x = randn(3)
    !!        -1.22003853  -0.211721316   0.522971511
    use forlab_kinds
    implicit none
contains
    !! Default versions
    #:for k1, t1 in REAL_KINDS_TYPES
    #:for RANK in RANKS
    module procedure randn_${RANK}$_${k1}$
    #:if RANK == 0
        real(${k1}$) :: u, v, s
    #:elif RANK == 1
        integer :: i
    #:elif RANK == 2
        integer :: i, j
    #:elif RANK == 3
        integer :: i, j, k
    #:endif
        real(${k1}$) :: opt_mean, opt_std 
        if(present(mean)) then
            opt_mean = mean
        else
            opt_mean = 0.0_${k1}$
        endif
        if (present(std)) then
            opt_std = std
        else
            opt_std = 1.0_${k1}$
        end if

        #:if RANK == 0
        do
            u = 2._${k1}$*randu() - 1._${k1}$
            v = 2._${k1}$*randu() - 1._${k1}$
            s = u*u + v*v
            if ((s > 0._${k1}$) .and. (s < 1._${k1}$)) exit
        end do
        randn_${RANK}$_${k1}$ = opt_mean + u*sqrt(-2.0_${k1}$*log(s)/s)*opt_std
        #:elif RANK == 1
        allocate (randn_${RANK}$_${k1}$ (dim1))
        do i = 1, dim1
            randn_${RANK}$_${k1}$ (i) = randn_0_${k1}$(mean=opt_mean, std=opt_std)
        end do
        #:elif RANK == 2
        allocate (randn_${RANK}$_${k1}$ (dim1, dim2))
        do i = 1, dim1
            do j = 1, dim2
                randn_${RANK}$_${k1}$ (i, j) = randn_0_${k1}$(mean=opt_mean, std=opt_std)
            end do
        end do
        #:elif RANK == 3
        allocate (randn_${RANK}$_${k1}$ (dim1, dim2, dim3))
        do i = 1, dim1
            do j = 1, dim2
                do k = 1, dim3
                    randn_${RANK}$_${k1}$ (i, j, k) = randn_0_${k1}$(mean=opt_mean, std=opt_std)
                end do
            end do
        end do
        #:endif

        return
    end procedure

    #:endfor
    #:endfor
end submodule
