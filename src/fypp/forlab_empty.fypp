#:include 'common.fypp'
#:set RANKS = range(1, 4)
submodule(forlab) forlab_empty
    !! Version: experimental
    !!## empty: `sempty(empty)/dempty/qempty`
    !! Create uninitialized matrices/arraies quickly, faster than `ones`/`zeros` function,
    !! and use `empty` function **with caution**.
    !! ([Interface](../interface/empty.html))
    !!### Description
    !! Empty is mainly to facilitate the allocation of arrays. 
    !! Its numerical precision is not important. We can only use empty, 
    !! but it is consistent with the zeros function. We also provide:
    !! `sempty(empty)/dempty/qempty`.
    !!### Example
    !!    real/integer, allocatable :: x(:, :)
    !!    x = empty(10)
    !!    x = empty(2, 3)
    !!### Allocatable Notes
    !! We use `allocatable` syntax to get the return value from `empty/zeros` function,
    !! that we can get our allocated array more quickily.
    use forlab_kinds
    implicit none
    
contains
    #:for k1 in REAL_KINDS
    #:for RANK in RANKS
    module procedure empty_${RANK}$_${k1}$
        integer :: ierr
        #:if RANK == 1
        allocate (empty_${RANK}$_${k1}$(dim1), stat=ierr)
        #:elif RANK == 2
        allocate (empty_${RANK}$_${k1}$(dim1, dim2), stat=ierr)
        #:elif RANK == 3
        allocate (empty_${RANK}$_${k1}$(dim1, dim2, dim3), stat=ierr)
        #:endif
        if (ierr .ne. 0) then
            call disp("ERROR: in empty, could not allocate array.")
            stop
        end if
    end procedure

    #:endfor
    #:endfor
end submodule

