#:include 'common.fypp'
module forlab_math

    use stdlib_kinds, only: sp, dp, qp, int8, int16, int32, int64
    use stdlib_optval, only: optval
    implicit none
    private

    public :: angle
    public :: cosd, sind,tand
    public :: acosd, asind, atand
    public :: arange, signum
    
    public :: is_close, all_close

    #:set CIR_NAME=["acos","asin","atan"]
    #:for l1 in CIR_NAME
    interface ${l1}$d
        !! degree circular functions
        #:for k1,t1 in REAL_KINDS_TYPES
        pure elemental module function ${l1}$d_${k1}$(x)
        ${t1}$,intent(in)::x
        ${t1}$::${l1}$d_${k1}$
        end function ${l1}$d_${k1}$
        #:endfor
    end interface ${l1}$d
    #:endfor

    #:set CIR_NAME=["cos","sin","tan"]
    #:for l1 in CIR_NAME
    interface ${l1}$d
        #:for k1,t1 in REAL_KINDS_TYPES
        pure elemental module function ${l1}$d_${k1}$(x)
        ${t1}$,intent(in)::x
        ${t1}$::${l1}$d_${k1}$
        end function ${l1}$d_${k1}$
        #:endfor
    end interface ${l1}$d
    #:endfor
    
    interface angle
        !! Version: experimental
        !!
        !! angle compute the phase angle.
        !!([Interface](../interface/angle.html))
        #:for kind, type in REAL_KINDS_TYPES
        procedure :: angle_${kind}$
        #:endfor
    end interface angle

    !> Version: experimental
    !>
    !> Returns a boolean scalar/array where two scalar/arrays are element-wise equal within a tolerance.
    !> ([Specification](../page/specs/forlab_math.html#is_close))
    interface is_close
        #:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:for k1, t1 in RC_KINDS_TYPES
        elemental module function is_close_${t1[0]}$${k1}$(a, b, rel_tol, abs_tol) result(close)
            ${t1}$, intent(in) :: a, b
            real(${k1}$), intent(in), optional :: rel_tol, abs_tol
            logical :: close
        end function is_close_${t1[0]}$${k1}$
        #:endfor
    end interface is_close

    !> Version: experimental
    !>
    !> Returns a boolean scalar where two arrays are element-wise equal within a tolerance.
    !> ([Specification](../page/specs/forlab_math.html#all_close))
    interface all_close
        #:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:for k1, t1 in RC_KINDS_TYPES
        logical module function all_close_${t1[0]}$${k1}$(a, b, rel_tol, abs_tol) result(close)
            ${t1}$, intent(in) :: a(..), b(..)
            real(${k1}$), intent(in), optional :: rel_tol, abs_tol
        end function all_close_${t1[0]}$${k1}$
        #:endfor
    end interface all_close

    !> Version: experimental
    !>
    !> `arange` creates a rank-1 `array` of the `integer/real` type 
    !>  with fixed-spaced values of given spacing, within a given interval.
    !> ([Specification](../page/specs/forlab_math.html#arange))
    interface arange
        #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
        #:for k1, t1 in RI_KINDS_TYPES
        pure module function arange_${t1[0]}$_${k1}$(start, end, step) result(result)
            ${t1}$, intent(in) :: start
            ${t1}$, intent(in), optional :: end, step
            ${t1}$, allocatable :: result(:)
        end function arange_${t1[0]}$_${k1}$
        #:endfor
    end interface arange

    !> Version: experimental
    !>
    !> `signum` returns the sign of variables.
    !> ([Specification](../page/specs/forlab_math.html#signum))
    interface signum
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:for k1, t1 in RCI_KINDS_TYPES
        ${t1}$ elemental module function signum_${t1[0]}$${k1}$(x) result(sign)
            ${t1}$, intent(in) :: x
        end function signum_${t1[0]}$${k1}$
        #:endfor
    end interface signum

contains

    #! angle compute the phase angle.
    #:for kind, type in REAL_KINDS_TYPES
    elemental function angle_${kind}$(value) result(angle) 
        real(${kind}$) :: angle
        complex(${kind}$),intent(in) :: value

        angle = aimag(log(value))

    end function angle_${kind}$
    #:endfor

end module forlab_math