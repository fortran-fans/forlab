#:include 'common.fypp'
module forlab_math

    use stdlib_kinds, only: sp, dp, qp, int8, int16, int32, int64
    use stdlib_optval, only: optval
    use stdlib_math, only: arange, is_close, all_close
    implicit none
    private

    public :: angle
    public :: cosd, sind,tand
    public :: acosd, asind, atand
    public :: arange, signum
    
    public :: is_close, all_close
    public :: cross, operator(.c.)

    #:set CIR_NAME=["acos","asin","atan"]
    #:for l1 in CIR_NAME
    interface ${l1}$d
        !! degree circular functions
        #:for k1,t1 in REAL_KINDS_TYPES
        pure elemental module function ${l1}$d_${k1}$(x)
        ${t1}$,intent(in)::x
        ${t1}$::${l1}$d_${k1}$
        end function ${l1}$d_${k1}$
        #:endfor
    end interface ${l1}$d
    #:endfor

    #:set CIR_NAME=["cos","sin","tan"]
    #:for l1 in CIR_NAME
    interface ${l1}$d
        #:for k1,t1 in REAL_KINDS_TYPES
        pure elemental module function ${l1}$d_${k1}$(x)
        ${t1}$,intent(in)::x
        ${t1}$::${l1}$d_${k1}$
        end function ${l1}$d_${k1}$
        #:endfor
    end interface ${l1}$d
    #:endfor
    
    interface angle
        !! Version: experimental
        !!
        !! angle compute the phase angle.
        !!([Interface](../interface/angle.html))
        #:for k1, t1 in REAL_KINDS_TYPES
        module procedure :: angle_${k1}$
        pure module function angle_2_${k1}$(x, y) result(angle)
            ${t1}$, dimension(3), intent(in) :: x, y
            ${t1}$ :: angle
        end function angle_2_${k1}$
        #:endfor
    end interface angle

    !> Version: experimental
    !>
    !> `signum` returns the sign of variables.
    !> ([Specification](../page/specs/forlab_math.html#signum))
    interface signum
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:for k1, t1 in RCI_KINDS_TYPES
        ${t1}$ elemental module function signum_${t1[0]}$${k1}$(x) result(sign)
            ${t1}$, intent(in) :: x
        end function signum_${t1[0]}$${k1}$
        #:endfor
    end interface signum
    
    interface cross
        #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
        #:for k1, t1 in RI_KINDS_TYPES
        pure module function cross_${t1[0]}$${k1}$(x, y) result(cross)
            ${t1}$, intent(in) :: x(3), y(3)
            ${t1}$ :: cross(3)
        end function cross_${t1[0]}$${k1}$
        #:endfor
    end interface cross
    
    interface operator(.c.)
        #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
        #:for k1, t1 in RI_KINDS_TYPES
        procedure :: cross_${t1[0]}$${k1}$
        #:endfor
    end interface operator(.c.)

contains

    #! angle compute the phase angle.
    #:for kind, type in REAL_KINDS_TYPES
    elemental function angle_${kind}$(value) result(angle) 
        real(${kind}$) :: angle
        complex(${kind}$),intent(in) :: value

        angle = aimag(log(value))

    end function angle_${kind}$
    #:endfor

end module forlab_math