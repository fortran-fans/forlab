#:include 'common.fypp'

submodule(forlab_io) forlab_io_bin

    implicit none

contains

    #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
    #:set RANKS = range(1, 4)
    #:for RANK in RANKS
    #:for k1,t1 in RCI_KINDS_TYPES
    module procedure loadbin_${RANK}$_${t1[0]}$${k1}$
        type(file) :: infile
        character(*), parameter :: type = '${t1[0]}$${k1}$'
        integer, allocatable :: nsize(:)
        character(8) :: datatype
        integer :: data_dim
        #:if t1[0] == 'c'
        real(${k1}$), allocatable :: rp${ranksuffix(RANK)}$, ip${ranksuffix(RANK)}$
        #:endif

        infile = file(filename, 'r b')
        if (infile%exist()) then
            call infile%open()
            read (infile%unit) datatype, data_dim
            if (trim(adjustl(datatype)) /= type) then
                call disp('Error: The program failed to try to read a '&
                //type//' array, but the file '//trim(filename)//&
                ' stored an array with a '//datatype//'.')
                stop
            endif
            if (data_dim /= ${RANK}$) then
                call disp('Error: The program failed to read the ' &
                //to_string(${RANK}$)//'-dimensional array. It may be that the file '&
                //trim(filename)//' stores an array of different dimensions '&
                //to_string(data_dim)//'.')
                stop
            endif

            allocate(nsize(${RANK}$))
            read (infile%unit) nsize(:)
            
            #:if RANK == 1
            allocate (X(nsize(1)))
            #:elif RANK == 2
            allocate (X(nsize(1),nsize(2)))
            #:elif RANK == 3
            allocate (X(nsize(1),nsize(2),nsize(3)))
            #:endif

            #:if t1[0] == 'c'
            #:if RANK == 1
            allocate (rp(nsize(1)))
            allocate (ip(nsize(1)))
            #:elif RANK == 2
            allocate (rp(nsize(1),nsize(2)))
            allocate (ip(nsize(1),nsize(2)))
            #:elif RANK == 3
            allocate (rp(nsize(1),nsize(2),nsize(3)))
            allocate (ip(nsize(1),nsize(2),nsize(3)))
            #:endif
            read (infile%unit) rp, ip
            X = cmplx(rp,ip,${k1}$)
            #:else
            read (infile%unit) X
            #:endif

            call infile%close()
        else
            print *, "Error: '"//trim(filename)//"' not found"
            stop
        end if
        return
    end procedure loadbin_${RANK}$_${t1[0]}$${k1}$
    #:endfor
    #:endfor

    #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
    #:set RANKS = range(1,4)
    #:for RANK in RANKS
    #:for k1,t1 in RCI_KINDS_TYPES
    module procedure savebin_${RANK}$_${t1[0]}$${k1}$
        type(File) :: outfile
        character(8), parameter :: type = '${t1[0]}$${k1}$'

        outfile = file(filename, 'w b')
        call outfile%open()
        write(outfile%unit) type, int(${RANK}$, 4)
        #:if RANK == 1
        write(outfile%unit) size(X,1)
        #:elif RANK == 2
        write(outfile%unit) size(X,1), size(X,2)
        #:elif RANK == 3
        write(outfile%unit) size(X,1), size(X,2), size(X,3)
        #:endif

        #:if t1[0] == 'c'
        write (outfile%unit) real(X), imag(X)
            !! Precision
            #! Store complex array values.
        #:else
        write (outfile%unit) X
            #! Store real array values.
        #:endif
        
        call outfile%close()
        return
    end procedure savebin_${RANK}$_${t1[0]}$${k1}$
    #:endfor
    #:endfor

end submodule
