#:include "common.fypp"

module forlab_stats

    use stdlib_kinds, only: sp, dp, qp, int8, int16, int32, int64
    implicit none
    private

    public :: mean, var, std
    public :: rng, randu, randn

    interface mean
        !! mean computes the mean value of an array.
        #:for k1, t1 in REAL_KINDS_TYPES
        module function mean_1_${k1}$(x) result(mean)
            ${t1}$, dimension(:), intent(in) :: x
            ${t1}$ :: mean
        end function mean_1_${k1}$
        module function mean_2_${k1}$(A, dim) result(mean)
            ${t1}$, dimension(:), allocatable :: mean
            ${t1}$, dimension(:, :), intent(in) :: A
            integer, intent(in), optional :: dim
        end function mean_2_${k1}$
        #:endfor
    end interface mean

    !> Version: Experimental
    !>
    !> Generate a normal distributed data scalar or vector.
    !> ([Specification](../page/specs/forlab_stats.html#randn))
    interface randn
        #:for k1, t1 in REAL_KINDS_TYPES
        module function randn_0_${k1}$(mean, std) result(random)
            ${t1}$, intent(in) :: mean, std
            ${t1}$ :: random
        end function randn_0_${k1}$
        module function randn_1_${k1}$(mean, std, ndim) result(random)
            ${t1}$, intent(in) :: mean, std
            integer, intent(in) :: ndim
            ${t1}$ :: random(ndim)
        end function randn_1_${k1}$
        #:endfor
    end interface randn

    !> Version: Experimental
    !>
    !> Generate an uniformly distributed data scalar or vector.
    !> ([Specification](../page/specs/forlab_stats.html#randomrandu))
    interface randu
        #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
        #:for k1, t1 in RI_KINDS_TYPES
        module function randu_0_${t1[0]}$${k1}$(start, end) result(random)
            ${t1}$, intent(in) :: start, end
            ${t1}$ :: random
        end function randu_0_${t1[0]}$${k1}$
        module function randu_1_${t1[0]}$${k1}$(start, end, ndim) result(random)
            ${t1}$, intent(in) :: start, end
            integer, intent(in) :: ndim
            ${t1}$ :: random(ndim)
        end function randu_1_${t1[0]}$${k1}$
        #:endfor
    end interface randu

    interface
        module subroutine rng(seed)
            integer, intent(in), optional :: seed
        end subroutine rng
    end interface

    #:set VSNAME = ['var', 'std']
    #:for v1 in VSNAME
    interface ${v1}$
        #:if v1 == 'var'
        !! `var` computes vector and matrix variances.
        !!([Specification](../module/forlab_var.html))
        #:elif v1 == 'std'
        !! `std` computes vector and matrix standard deviations.
        !!([Specification](../module/forlab_var.html))
        #:endif
        #:for k1, t1 in REAL_KINDS_TYPES
        ${t1}$ module function ${v1}$_1_${k1}$(x, w)
            ${t1}$, dimension(:), intent(in) :: x
            integer, intent(in), optional :: w
        end function ${v1}$_1_${k1}$
        module function ${v1}$_2_${k1}$(A, w, dim)
            ${t1}$, dimension(:), allocatable :: ${v1}$_2_${k1}$
            ${t1}$, dimension(:, :), intent(in) :: A
            integer, intent(in), optional :: w, dim
        end function ${v1}$_2_${k1}$
        #:endfor
    end interface ${v1}$
    #:endfor

end module forlab_stats