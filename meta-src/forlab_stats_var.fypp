#:include 'common.fypp'

submodule(forlab_stats) forlab_stats_var

    implicit none

contains

    #:set VSNAME = ['var', 'std']
    #:for v1 in VSNAME
    #:for k1, t1 in REAL_KINDS_TYPES
    module procedure ${v1}$_1_${k1}$
        integer :: opt_w

        opt_w = 0
        if (present(w)) opt_w = w
        #:if v1 == 'var'
        select case (opt_w)
        case (0)
            ${v1}$_1_${k1}$ = sum((x - mean(x))**2)/(size(x) - 1)
        case (1)
            ${v1}$_1_${k1}$ = sum((x - mean(x))**2)/size(x)
        end select
        #:elif v1 == 'std'
        ${v1}$_1_${k1}$ = sqrt(var_1_${k1}$(x, opt_w))
        #:endif
        return
    end procedure ${v1}$_1_${k1}$

    module procedure ${v1}$_2_${k1}$
        #:if v1 == 'var'
        integer :: opt_w, i, m, n
        #:elif v1 == 'std'
        integer :: opt_w, i
        #:endif

        opt_w = 0
        if (present(w)) opt_w = w
        #:if v1 == 'var'
        m = size(A, 1)
        n = size(A, 2)
        if ((.not. present(dim)) .or. (dim == 1)) then
            allocate (${v1}$_2_${k1}$(n))
            do i = 1, n
                ${v1}$_2_${k1}$(i) = ${v1}$_1_${k1}$(A(:, i), opt_w)
            end do
        elseif (dim == 2) then
            allocate (${v1}$_2_${k1}$(m))
            do i = 1, m
                ${v1}$_2_${k1}$(i) = ${v1}$_1_${k1}$(A(i, :), opt_w)
            end do
        end if
        #:elif v1 == 'std'
        if (.not. present(dim)) then
            std_2_${k1}$ = sqrt(var_2_${k1}$(A, opt_w))
        else
            std_2_${k1}$ = sqrt(var_2_${k1}$(A, opt_w, dim))
        end if
        #:endif
        return
    end procedure ${v1}$_2_${k1}$
    #:endfor
    #:endfor

end submodule forlab_stats_var
