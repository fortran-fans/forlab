#:include 'common.fypp'
module forlab_io

    use stdlib_error,  only: error_stop
    use stdlib_io, only: open, parse_mode
    use stdlib_ascii, only: to_string
    use stdlib_kinds, only: sp, dp, qp, &
        int8, int16, int32, int64, lk, c_bool
    use stdlib_optval, only: optval
    use forlab_strings, only: format_string
    implicit none
    private

    public :: file
    public :: countlines, file_exist
    public :: savebin, loadbin, savetxt, loadtxt
    public :: set_color
    public :: disp

    !> Version: experimental
    !> 
    !> forlab file derived type.
    !> ([Specification](../page/specs/forlab_io.html#file-file-constructor-and-file-derived-type))
    type file
        character(:), allocatable :: filename
        character(3) :: mode
        integer :: unit
        integer :: lines
    contains
        procedure :: exist => file_exist1
        procedure :: open => open_file
        procedure :: countlines => countlines1
        procedure :: close
    end type file

    interface disp
        !! version: experimental
        !!
        !! Quickly display strings, scalars and low-dimensional arrays to the default output_unit
        !! ([Specification](../page/specs/stdlib_io.html#description))
        #:set DISP_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES &
            & + CMPLX_KINDS_TYPES + LOG_KINDS_TYPES
        #:set DISP_RANKS = range(0, 4)
        #:for k1, t1 in DISP_KINDS_TYPES
        #:for rank in DISP_RANKS
        #:if rank != 3
        module subroutine disp_${rank}$_${t1[0]}$${k1}$(value, string)
            ${t1}$, intent(in) :: value${ranksuffix(rank)}$
            character(len=*), intent(in), optional :: string
        end subroutine disp_${rank}$_${t1[0]}$${k1}$
        #:else
        module subroutine disp_${rank}$_${t1[0]}$${k1}$(value, dim, string)
            ${t1}$, intent(in) :: value${ranksuffix(rank)}$
            integer, intent(in) :: dim
            character(len=*), intent(in), optional :: string
        end subroutine disp_${rank}$_${t1[0]}$${k1}$
        #:endif
        #:endfor
        #:endfor
        module subroutine disp_str(value, string)
            character(len=*), intent(in), optional :: value
            character(len=*), intent(in), optional :: string
        end subroutine disp_str
    end interface disp

    interface file
        procedure init_file
    end interface file

    interface countlines
        procedure countlines2
    end interface countlines

    interface file_exist
        procedure file_exist2
    end interface file_exist

    interface loadbin
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:set RANKS = range(1,4)
        #:for RANK in RANKS
        #:for k1,t1 in RCI_KINDS_TYPES
        module subroutine loadbin_${RANK}$_${t1[0]}$${k1}$(filename, X)
            character(len=*), intent(in) :: filename
            #:if RANK == 1
            ${t1}$, dimension(:), allocatable, intent(out) :: X
            #:elif RANK == 2
            ${t1}$, dimension(:, :), allocatable, intent(out) :: X
            #:elif RANK == 3
            ${t1}$, dimension(:, :, :), allocatable, intent(out) :: X
            #:endif
        end subroutine
        #:endfor
        #:endfor
    end interface

    interface loadtxt
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:set RANKS = range(1,3)
        #:for RANK in RANKS
        #:for k1,t1 in RCI_KINDS_TYPES
        module subroutine loadtxt_${RANK}$_${t1[0]}$${k1}$(filename, X)
            character(len=*), intent(in) :: filename
            #:if RANK == 1
            ${t1}$, dimension(:), allocatable, intent(out) :: X
            #:elif RANK == 2
            ${t1}$, dimension(:, :), allocatable, intent(out) :: X
            #:endif
        end subroutine
        #:endfor
        #:endfor
    end interface

    interface savebin
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:set RANKS = range(1,4)
        #:for RANK in RANKS
        #:for k1,t1 in RCI_KINDS_TYPES
        module subroutine savebin_${RANK}$_${t1[0]}$${k1}$(filename, X)
            character(len=*), intent(in) :: filename
            #:if RANK == 1
            ${t1}$, dimension(:), intent(in) :: X
            #:elif RANK == 2
            ${t1}$, dimension(:, :), intent(in) :: X
            #:elif RANK == 3
            ${t1}$, dimension(:, :, :), intent(in) :: X
            #:endif
        end subroutine
        #:endfor
        #:endfor
    end interface savebin

    interface savetxt
        #:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES
        #:set RANKS = range(1,3)
        #:for RANK in RANKS
        #:for k1,t1 in RCI_KINDS_TYPES
        module subroutine savetxt_${RANK}$_${t1[0]}$${k1}$(filename, X)
            character(len=*), intent(in) :: filename
            #:if RANK == 1
            ${t1}$, dimension(:), intent(in) :: X
            #:elif RANK == 2
            ${t1}$, dimension(:, :), intent(in) :: X
            #:endif
        end subroutine
        #:endfor
        #:endfor
    end interface savetxt

    interface
        !> `set_color` set color for console text.
        subroutine set_color(value) bind(c, name="color")
            use, intrinsic :: iso_c_binding, only: c_long
            integer(c_long), value, intent(in) :: value
        end subroutine set_color
    end interface

contains

    !> Version: experimental
    !> 
    !> Open the file. ([Specification](../page/specs/forlab_io.html#fileopen))
    subroutine open_file(self)
        class(file), intent(inout) :: self
        integer :: stat

        self%unit = open(self%filename, self%mode, iostat=stat)
        if(stat /= 0) call error_stop('Error: File "' // self%filename // &
            '" open failed, iostat = '//to_string(stat))

    end subroutine open_file

    !> Version: experimental
    !> 
    !> `close` closes a `file` object, deallocate `file%filename`.
    !> ([Specification](../page/specs/forlab_io.html#fileclose))
    subroutine close (self)
        class(file), intent(inout) :: self

        deallocate(self%filename)
        close(self%unit)

    end subroutine close

    !> Version: experimental
    !>
    !> `countlines` counts the number of lines in a txt file.
    !> ([Specification](../page/specs/forlab_io.html#filecountlines))
    subroutine countlines1(self)
        class(file), intent(inout) :: self
        integer :: ierr
        logical :: ok
        
        self%lines = 0
        ok = .false.
        inquire(unit=self%unit, opened=ok)
        if (ok) then
            rewind(self%unit)
            do
                read (self%unit, *, iostat=ierr)
                if (ierr < 0) exit
                self%lines = self%lines + 1
            end do
            rewind(self%unit)
        else
            call self%open()
            do
                read (self%unit, *, iostat=ierr)
                if (ierr < 0) exit
                self%lines = self%lines + 1
            end do
            call self%close()
        end if
        if (self%lines == 0) then
            call disp('Warn: linecounts is 0 in "' // self%filename // '".')
        end if

    end subroutine countlines1

    !> The `countlines2` function returns the number of lines of the file
    integer function countlines2(filename)
        character(len=*), intent(in) :: filename
        type(file) :: infile

        infile = file(trim(filename))
        if(.not.infile%exist()) call error_stop('Error: File "'//infile%filename &
                                        //'" open failed.')
        call infile%open()
        call infile%countlines()
        call infile%close()
        countlines2 = infile%lines

    end function countlines2

    !> Version: experimental
    !>
    !> `file_exist` determines whether a `file` object already exists.
    !> ([Specification](../page/specs/forlab_io.html#fileexist))
    function file_exist1(self) result(result)
        class(File), intent(inout) :: self
        logical :: result

        inquire(file=self%filename, exist=result)

    end function file_exist1

    logical function file_exist2(filename)
        !! The `countlines2` function returns the number of lines of the file
        character(len=*), intent(in) :: filename
        type(File) :: infile

        infile = File(filename)
        file_exist2 = infile%exist()
        return
    end function file_exist2

    type(file) function init_file(filename, mode)
        !!## File (constructor)
        !! File constructs a File object.
        !!
        !!### Syntax
        !! ofile = file(filename, mode)
        !!
        !!### Description
        !! `ofile = file(filename, mode)` returns a File object associated to the
        !! file filename with the identifier unit.
        !!
        !!### Examples
        !!    type(file) :: ofile
        !!
        !!    ofile = file("myfile.txt", "r")
        !!    call ofile%open()
        !!    !! ... some operations on this file ...
        !!    call ofile%close()
        character(len=*), intent(in) :: filename
        character(len=*), intent(in), optional :: mode
        character(len=3) :: mode_

        mode_ = parse_mode(optval(mode, ''))
        init_file%filename = filename
        init_file%mode = mode_

        return
    end function init_file
    
end module forlab_io
