#:include "common.fypp"
submodule(forlab_math) forlab_math_signum

contains

    #! `signum` returns the sign of variables.
    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$ elemental module function signum_${t1[0]}$${k1}$(x) result(sign)

        ${t1}$, intent(in) :: x

        if     (x < 0.0_${k1}$) then; sign = -1.0_${k1}$
        elseif (x > 0.0_${k1}$) then; sign =  1.0_${k1}$
        else;                         sign =  0.0_${k1}$
        end if

    end function signum_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
    ${t1}$ elemental module function signum_${t1[0]}$${k1}$(x) result(sign)

        ${t1}$, intent(in) :: x

        if     (x < 0_${k1}$) then; sign = -1_${k1}$
        elseif (x > 0_${k1}$) then; sign =  1_${k1}$
        else;                       sign =  0_${k1}$
        end if

    end function signum_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    ${t1}$ elemental module function signum_${t1[0]}$${k1}$(x) result(sign)

        ${t1}$, intent(in) :: x

        if (x == (0.0_${k1}$, 0.0_${k1}$)) then; sign = x
        else;                                    sign = x/abs(x)
        end if

    end function signum_${t1[0]}$${k1}$
    #:endfor

end submodule forlab_math_signum